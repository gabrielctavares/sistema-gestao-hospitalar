@page "/medicos/delete"
@inject NavigationManager NavigationManager
@inject IMedicoService MedicoService
@inject ISnackbar Snackbar

<PageTitle>Deletar</PageTitle>

<h1>Deletar</h1>

<p>Tem certeza que deseja deletar isso?</p>
<div>
    <h2>Médico</h2>
    <hr />
    @if (medico is null)
    {
        <p><em>Carregando...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CRM</dt>
            <dd class="col-sm-10">@medico.Crm</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@medico.Nome</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Especialidade</dt>
            <dd class="col-sm-10">@medico.Especialidade</dd>
        </dl>
        <EditForm method="post" Model="medico" OnValidSubmit="DeleteMedico" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(medico is null)">Deletar</button> |
            <a href="/medicos">Voltar</a>
        </EditForm>
    }
</div>

@code {
    private Medico? medico;

    [SupplyParameterFromQuery]
    private int IdFuncionario { get; set; }

    protected override async Task OnInitializedAsync()
    {
        medico = await MedicoService.GetMedicoByIdFuncionarioAsync(IdFuncionario);

        if (medico is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMedico()
    {

        try
        {
            await MedicoService.DeleteMedicoAsync(medico!.IdFuncionario);
            NavigationManager.NavigateTo("/medicos");
        }
        catch (Exception e)
        {

            Snackbar.Add("Erro ao deletar médico." + e.Message, Severity.Error);

        }
    }
}
